name: Release

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - "**.md"
      - "docs/**"

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Determine version bump
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          # Get commits since last tag (or all commits if no previous tag)
          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --oneline)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
          fi

          # Parse commits for version bump
          if echo "$COMMITS" | grep -qiE "^[0-9a-f]+ FEATURE"; then
            # FEATURE commits trigger minor version bump
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -qiE "^[0-9a-f]+ FIX"; then
            # FIX commits trigger patch version bump
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            # REFACTOR or other commits don't trigger a release
            echo "bump=none" >> $GITHUB_OUTPUT
          fi

      - name: Calculate new version
        id: new_version
        if: steps.version.outputs.bump != 'none'
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          if [ "${{ steps.version.outputs.bump }}" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "${{ steps.version.outputs.bump }}" = "patch" ]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version in build.gradle
        if: steps.version.outputs.bump != 'none'
        run: |
          VERSION=${{ steps.new_version.outputs.version }}
          VERSION=${VERSION#v}  # Remove 'v' prefix
          sed -i "s/version = '.*'/version = '$VERSION'/" build.gradle

      - name: Build artifacts
        if: steps.version.outputs.bump != 'none'
        run: ./gradlew build

      - name: Publish to Maven Central
        if: steps.version.outputs.bump != 'none'
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        run: |
          echo "Verifying credentials are set..."
          if [ -z "$MAVEN_CENTRAL_USERNAME" ]; then echo "ERROR: MAVEN_CENTRAL_USERNAME is empty"; exit 1; fi
          if [ -z "$MAVEN_CENTRAL_PASSWORD" ]; then echo "ERROR: MAVEN_CENTRAL_PASSWORD is empty"; exit 1; fi
          echo "Username: ${MAVEN_CENTRAL_USERNAME:0:3}***"
          echo "Password length: ${#MAVEN_CENTRAL_PASSWORD}"

          echo "$SIGNING_KEY" | base64 -d > signing-key.gpg
          ./gradlew publishAllPublicationsToMavenCentral \
            -Psigning.keyId="$SIGNING_KEY_ID" \
            -Psigning.password="$SIGNING_PASSWORD" \
            -Psigning.secretKeyRingFile="$(pwd)/signing-key.gpg" \
            -PmavenCentralUsername="$MAVEN_CENTRAL_USERNAME" \
            -PmavenCentralPassword="$MAVEN_CENTRAL_PASSWORD"
          rm signing-key.gpg

      - name: Create and push tag
        if: steps.version.outputs.bump != 'none'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.new_version.outputs.version }}
          git push origin ${{ steps.new_version.outputs.version }}

      - name: Create GitHub Release
        if: steps.version.outputs.bump != 'none'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.version }}
          release_name: Release ${{ steps.new_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## LogBull Java ${{ steps.new_version.outputs.version }}

            ### Maven
            ```xml
            <dependency>
                <groupId>com.logbull</groupId>
                <artifactId>logbull</artifactId>
                <version>${{ steps.new_version.outputs.version }}</version>
            </dependency>

            <dependency>
                <groupId>com.logbull</groupId>
                <artifactId>logbull-spring-boot-starter</artifactId>
                <version>${{ steps.new_version.outputs.version }}</version>
            </dependency>
            ```

            ### Gradle
            ```groovy
            implementation 'com.logbull:logbull:${{ steps.new_version.outputs.version }}'
            implementation 'com.logbull:logbull-spring-boot-starter:${{ steps.new_version.outputs.version }}'
            ```
